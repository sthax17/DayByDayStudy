# -*- coding: utf-8 -*-
"""study0716.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YiY3PAuY-dclN0H9ltJQHh2wYUCq8WWT
"""

def run_cmd_with_stack(stack, cmd):
    cmd_type = cmd[0]

    if cmd_type == "push":
        _, num = cmd
        stack.append(int(num))
    elif cmd_type == "pop":
        if len(stack) > 0:
            print(stack.pop())
        else:
            print(-1)
    elif cmd_type == "size":
        print(len(stack))
    elif cmd_type == "empty":
        if len(stack) > 0:
            print(0)
        else:
            print(1)

    elif cmd_type == "top":
        if len(stack) > 0:
            print(stack[-1])
        else:
            print(-1)

    return stack

stack = []

n = int(input())

for _ in range(n):

    stack = run_cmd_with_stack(stack, command)

class Stack:
    def __init__(self, n):
        self.stack = [None for _ in range(n)]
        self.stack_size = 0


     def push(self, num):
         # self.stack.append(int(num))
         self.stack[self.stack_size] = int(num)
         self.stack_size += 1


      def pop(self):
         if self.size() > 0:
             last_val = self.top()
             self.stack[self.stack_size - 1] = None
             self.stack_size -= 1

             return last_val

          return -1
           # 2)
           # last_val = self.top()
           # if last_val > 0:
           #     self.stack_size -= 1

           # return last_val


      def size(self):
          return self.stack_size


      def empty(self):
          if self.size() > 0:
             return 0

          return 1


          # return int(self.stack_size <= 0)


      def top(self):
          if self.stack_size > 0:
              return self.stack[self.stack_size - 1]

          return -1


def run_cmd_with_stack(my_stack, cmd):
    cmd_type = cmd[0]


    if cmd_type == "push":
        _, num = cmd  # num = cmd[1]
     my_stack.push(num)
    elif cmd_type == "pop":
        print(my_stack.pop())
    elif cmd_type == "size":
     print(my_stack.size())
    elif cmd_type == "empty":
        print(my_stack.empty())
    elif cmd_type == "top":
        print(my_stack.top())

    return my_stack

n = int(input())
my_stack = Stack(n)

for _ in range(n):
    # "push 2".split() => ["push", "2"]
    # "size".split() => ["size"]
    command = input().split()
    my_stack = run_cmd_with_stack(my_stack, command)

print(my_stack.stack)
print(f"stack_size: {my_stack.stack_size}")



"""queue"""

def run_cmd_with_queue(queue, cmd):
    cmd_type = cmd[0]

    if cmd_type == "push":
        _, num = cmd
        queue.append(int(num))
    elif cmd_type == "pop":
        if len(queue) > 0:
            print(queue.pop(0))
        else:
            print(-1)
    elif cmd_type == "size":
        print(len(queue))
    elif cmd_type == "empty":
        if len(queue) > 0:
            print(0)
        else:
            print(1)

        # 
    elif cmd_type == "front":
        if len(queue) > 0:
            print(queue[0])
        else:
            print(-1)        
    elif cmd_type == "back":
        if len(queue) > 0:
            print(queue[-1])
        else:
            print(-1)

    return queue

queue = []

n = int(input())

for _ in range(n):
    # 
    # 
    command = input().split()
    queue = run_cmd_with_queue(queue, command)

def run_cmd_with_queue(queue, size, cmd):
    cmd_type = cmd[0]

    if cmd_type == "push":
        _, num = cmd
        queue.append(int(num))
        size += 1

    elif cmd_type == "pop":
        if size > 0:
            print(queue.pop(0))
            size -= 1
        else:
            print(-1)

    elif cmd_type == "size":
        print(size)

    elif cmd_type == "empty":
        if size > 0:
            print(0)
        else:
            print(1)

        # 
    elif cmd_type == "front":
        if size > 0:
            print(queue[0])
        else:
            print(-1)        

    elif cmd_type == "back":
        if size > 0:
            print(queue[-1])
        else:
            print(-1)

    return queue, size

queue = []
size = 0

n = int(input())

for _ in range(n):
    # 
    # 
    command = input().split()
    queue, size = run_cmd_with_queue(queue, size, command)

class Queue:
    def __init__(self):
        self.queue = []
        self.queue_size = 0

    def push(self, num):
        self.queue.append(int(num))
        self.queue_size += 1
    
    def pop(self):
        if self.queue_size > 0:
            self.queue_size -= 1
            return self.queue.pop(0)

        return -1

    def size(self):
        return self.queue_size
    

    def empty(self):
        if self.queue_size > 0:
            return 0

        return 1

    def front(self):
        if self.queue_size > 0:
            return self.queue[0]
        return -1    

    def back(self):
        if self.queue_size > 0:
            return self.queue[-1]
        return -1

def run_cmd_with_queue(my_queue, cmd):
    cmd_type = cmd[0]

    if cmd_type == "push":
        _, num = cmd
        my_queue.push(num)       
    elif cmd_type == "pop":
        print(my_queue.pop())
    elif cmd_type == "size":
        print(my_queue.size())
    elif cmd_type == "empty":
        print(my_queue.empty())
    elif cmd_type == "front":
        print(my_queue.front())
    elif cmd_type == "back":
        print(my_queue.back())

    return my_queue


my_queue = Queue()
n = int(input())

for _ in range(n):
    command = input().split()
    my_queue = run_cmd_with_queue(my_queue, command)

"""클래스 *append* 제외
back None
"""

class Queue:
    def __init__(self, n):
        self.queue = [None for _ in range(n)]
        self.queue_size = 0

    def push(self, num):
        self.queue[self.queue_size] = int(num)
        self.queue_size += 1
    
    def pop(self):
        if self.queue_size > 0:
            self.queue_size -= 1
            return self.queue.pop(0)

        return -1

    def size(self):
        return self.queue_size
    

    def empty(self):
        if self.queue_size > 0:
            return 0

        return 1

    def front(self):
        if self.queue_size > 0:
            return self.queue[0]
        return -1    

    def back(self):
        if self.queue_size > 0:
            return self.queue[-1]
        return -1

def run_cmd_with_queue(my_queue, cmd):
    cmd_type = cmd[0]

    if cmd_type == "push":
        _, num = cmd
        my_queue.push(num)       
    elif cmd_type == "pop":
        print(my_queue.pop())
    elif cmd_type == "size":
        print(my_queue.size())
    elif cmd_type == "empty":
        print(my_queue.empty())
    elif cmd_type == "front":
        print(my_queue.front())
    elif cmd_type == "back":
        print(my_queue.back())

    return my_queue


n = int(input())
my_queue = Queue(n)

for _ in range(n):
    command = input().split()
    my_queue = run_cmd_with_queue(my_queue, command)

"""베이즈 정리"""

# Commented out IPython magic to ensure Python compatibility.
# %precision% 5f

sens = 0.98
spec = 0.95
p_D = 0.03

sens*p_D / (sens*p_D + (1-spec) * (1-p_D))