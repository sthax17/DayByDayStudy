# -*- coding: utf-8 -*-
"""crawler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_gpqteifmv5QETnw5eqj5l387Qjjq03b
"""

import pandas as pd


class CafeCrawler:
    def __init__(self, path):
        with open(path, 'r', encoding='UTF-8') as f:
          self.source = f.read()
        self.df = pd.DataFrame()
        self._generated = False

    def generate_dataframe(self):
        self._split_number()
        self._split_title()
        self._split_writer()
        self._split_date()
        self._split_view()
        self._split_like()

        self.df.set_index('게시글번호', inplace=True)
        self._generated = True
        return self.df

    def _split_number(self):
        splits = self.source.split('<divclass="inner_number">')
        number_list = []
        splits.pop(0)

        for split in splits:
            number_list.append(int(split.split('</div>')[0]))

        self.df['게시글번호'] = number_list


    def _split_title(self):
        splits = self.source.split('class="article"')
        splits.pop(0)
        title_list = []

        for split in splits:
            title_list.append(split.split('</a>')[0].split('>')[-1]
                                  .replace('\n/', '')
                                  .replace('\t/', '')
                                  .strip())
        title_list.pop(0)
        self.df['제목'] = title_list

    def _split_writer(self):
        splits = self.source.split('<td class="td_name">')
        splits.pop(0)
        writer_list = []

        for item in splits:
            writer_list.append(item
                               .split('</td>')[0]
                               .split('a href')[1]
                               .split('</a>')[0]
                               .split('>')[-1])
        writer_list.pop(0)
        self.df['글쓴이'] = writer_list

    def _split_date(self):
        self.df['날짜'] = self._split(keyword='date')

    def _split_view(self):
        self.df['조회수'] = self._split(keyword='view', casting=True)

    def _split_like(self):
        self.df['좋아요'] = self._split(keyword='likes', casting=True)

    def filter_view(self, low, **kwargs):
      if self._generated:
        if not kwargs.get('high'):
          return self.df[self.df['조회수'] >= low]
        else:
          return self.df[(self.df['조회수'] < kwargs['high']) & (self.df['조회수'] >= low)]


    def filter_view(self, low, **kwargs):
      if self._generated:
        if not kwargs.get('high'):
            return self.df[self.df['조회수'] >= low]
        else:
            return self.df[(self.df['조회수'] < kwargs['high']) & (self.df['조회수'] >= low)]
    def export_csv(self):
      self.df.to_csv('./cafe_data.csv')

    def import_csv(self, path):
      self.df = pd.read_csv(path)


    def _split(self, keyword, **kwargs):
      splits = self.source.split(f'<td class="td_{keyword}">')
      splits.pop(0)
      arr = []
      for item in splits:
        if kwargs.get('casting'):
            arr.append(int(item.split('</td>')[0].replace(',', '')))
        else:
            arr.append(item.split('</td>')[0].replace(',', ''))
      arr.pop(0)
      return arr





