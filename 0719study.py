# -*- coding: utf-8 -*-
"""0719study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nymSpuOlodF8cpcAJDvXza3MqpPraS5A

Queue
"""

class Queue:
    def __init__(self, n):
        self.queue = [None for _ in range(n)]
        self.queue_size = 0
    def push(self, num):
        self.queue[self.queue_size] = int(num)
        self.queue_size += 1    
    def pop(self):
        if self.queue_size > 0:
            self.queue_size -= 1
            return self.queue.pop(0)
        return -1
    def size(self):
        return self.queue_size    
    def empty(self):
        if self.queue_size > 0:
            return 0
        return 1
    def front(self):
        if self.queue_size > 0:
            return self.queue[0]
        return -1    
    def back(self):
        if self.queue_size > 0:
            return self.queue[self.queue_size-1]
        return -1

def run_cmd_with_queue(my_queue, cmd):
    cmd_type = cmd[0]
    if cmd_type == "push":
        _, num = cmd
        my_queue.push(num)       
    elif cmd_type == "pop":
        print(my_queue.pop())
    elif cmd_type == "size":
        print(my_queue.size())
    elif cmd_type == "empty":
        print(my_queue.empty())
    elif cmd_type == "front":
        print(my_queue.front())
    elif cmd_type == "back":
        print(my_queue.back())
    return my_queue


n = int(input())
my_queue = Queue(n)

for _ in range(n):
    command = input().split()
    my_queue = run_cmd_with_queue(my_queue, command)

"""큐 클래스 강사님 안..."""

class Queue:
    def __init__(self, n):
        # self.array = [None] * n
        self.array = [None for _ in range(n)]
        self.f_idx = 0
        self.b_idx = 0
    
    def push(self, num):
        self.array[self.b_idx] = num
        self.b_idx += 1
    def pop(self):
        # if self.b_idx - self.f_idx == 0:
        # if self.f_idx == self.b_idx:
        # if self.size() == 0:
        if self.is_empty():
            return -1

        # last_val = self.array[self.f_idx]
        # self.f_idx += 1
        # return last_val

        self.f_idx += 1
        return self.array[self.f_idx-1]
        
    def size(self):
        return self.b_idx - self.f_idx
    def empty(self):
        return int(self.is_empty())
    def is_empty(self):
        return self.size() == 0
    def front(self):
        if self.is_empty():
            return -1

        return self.array[self.f_idx]
    def back(self):
        if self.is_empty():
            return -1

        return self.array[self.b_idx-1]

def run_cmd_with_queue(command, queue_obj):
# def runCmdWithQueue(command, queueObj):
    cmd_type = command[0]

    if cmd_type == "push":
        _, num = command
        queue_obj.push(int(num))
    elif cmd_type == "pop":
        print(queue_obj.pop())
    elif cmd_type == "size":
        print(queue_obj.size())
    elif cmd_type == "empty":
        print(queue_obj.empty())
        # print(int(queue_obj.is_empty()))
    elif cmd_type == "front":
        print(queue_obj.front())
    elif cmd_type == "back":
        print(queue_obj.back())
    return queue_obj       

n = int(input())
queue_obj = Queue(n)

for _ in range(n):
    run_cmd_with_queue(input().split(), queue_obj)

# [..., 1,2,3,4, ...]
class Queue:
    def __init__(self, n):
        # self.array = [None] * n
        self.array = [None for _ in range(n)]
        self.f_idx = 0
        self.b_idx = 0
    
    def push(self, num):
        self.array[self.b_idx] = num
        self.b_idx += 1
    def pop(self):
        # if self.b_idx - self.f_idx == 0:
        # if self.f_idx == self.b_idx:
        # if self.size() == 0:
        if self.is_empty():
            return -1

        # last_val = self.array[self.f_idx]
        # self.f_idx += 1
        # return last_val

        self.f_idx += 1
        return self.array[self.f_idx-1]
    def size(self):
        return self.b_idx - self.f_idx
    def empty(self):
        return int(self.is_empty())
    def is_empty(self):
        return self.size() == 0
    def front(self):
        if self.is_empty():
            return -1

        return self.array[self.f_idx]
    def back(self):
        if self.is_empty():
            return -1

        return self.array[self.b_idx-1]

def run_cmd_with_queue(command, queue_obj):
# def runCmdWithQueue(command, queueObj):
    cmd_type = command[0]

    if cmd_type == "push":
        _, num = command
        queue_obj.push(int(num))
    elif cmd_type == "pop":
        print(queue_obj.pop())
    elif cmd_type == "size":
        print(queue_obj.size())
    elif cmd_type == "empty":
        print(queue_obj.empty())
        # print(int(queue_obj.is_empty()))
    elif cmd_type == "front":
        print(queue_obj.front())
    elif cmd_type == "back":
        print(queue_obj.back())

n = int(input())
queue_obj = Queue(n)

for _ in range(n):
    run_cmd_with_queue(input().split(), queue_obj)

from collections import deque

deque_obj = deque()

print(type(deque_obj))
print(deque_obj)
deque_obj.appendleft(10)
print(deque_obj)
deque_obj.appendleft(20)
print(deque_obj)

deque_obj.appendleft(30)
print(deque_obj)
deque_obj.append(100)
print(deque_obj)

deque_obj.append(200)
print(deque_obj)
deque_obj.popleft()
print(deque_obj)

deque_obj.pop()
print(deque_obj)

"""study"""







