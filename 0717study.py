# -*- coding: utf-8 -*-
"""0717study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12JO7Fru4y1ffcsUnmtUtjslI-6aNFwT8
"""

def fibonacci(n):
  if n == 1: 
    return 1
  if n == 2:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)

print("fibonacci(1):", fibonacci(1))
print("fibonacci(2):", fibonacci(2))
print("fibonacci(3):", fibonacci(3))
print("fibonacci(4):", fibonacci(4))
print("fibonacci(5):", fibonacci(5))

counter = 0
def fibonacci(n):

  print("fibonacci({})를 구합니다.".format(n))
  global counter
  counter += 1
  if n == 1: 
    return 1
  if n == 2:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)

fibonacci(10)
print("fibonacci(10) 계산을 활용한 덧셈 횟수{}번입니다.".format(counter))

counter = 0
def fibonacci(n):


  global counter
  counter += 1
  if n == 1: 
    return 1
  if n == 2:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(10))

dictionary = {1:1, 2:2}
def fibonacci(n):
  if n in dictionary:
    return dictionary[n]
  else:
    output = fibonacci(n-1) + fibonacci(n-2)
    dictionary[n] = output
    return output

print("fibonacci(10):", fibonacci(10))
print("fibonacci(20):", fibonacci(20))
print("fibonacci(30):", fibonacci(30))
print("fibonacci(40):", fibonacci(40))
print("fibonacci(50):", fibonacci(50))

#숫자 입력을 받습니다.
radius = input("숫자입력")
radius = float(number_input_a)

#원의 둘레와 넓이를 출력합니다.
print(2 * 3.14 * radius)
print(3.14 * radius * radius)

#함수정의
def number_input():
  output = input("숫자 입력>")
  return float(output)
def get_circumference(radius):
  return 2 * 3.14 * radius
def get_circle_area(radius):
  return 3.14 * radius * radius

#코드본문
radius = number_input()
print(get_circumference(radius))
print(get_circle_area(radius))



def flatten(data):
  output = []
  for item in data:
    if type(item) == list:
      output += flatten(item)
    else:
      #output.append(item)
      output += [item]
  return output      

example = [[1, 2, 3], [4,[5,6], 7,[8,9]]]
print('원본:', example)
print('변환:', flatten(example))

#list와 int 분리함수... 
print(example[1][2])
type(example[1][2])

min = 2
max = 10
total = 100
memo = {}

def solution(nam, sit):
  key = str([nam, sit])
  #종료 조건
  if key in memo:
     return memo[key]
  if nam < 0:
    return 0
  if nam == 0:
    return 1

  #재귀 처리    
  count = 0
  for i in range(sit, max +1):
    count += solution(nam -i, i)
  #메모화 처리
  memo[key] = count
  #종료
  return count

print(solution(total, min))

for (i, value) in enumerate([1, 2, 3, 4, 5, 0]):
  print("{}번째 요소는{}입니다.".format(i, value))

print(273,)
print(type((273,)))

a = (273, 1)
a[1]

a = {
    (0, 0): 10,
     (0, 1): 20,
     (1,0): 30,
     (1, 1): 40
}

print( a[0 ,0] )
print( a[(0, 0)] )

#매개변수를 받는 함수, 콜백함수callbakk의 매개 변수
def call_10_times(func):
  for i in range(10):
    func(i)

def print_hello(i):
  print('안녕하세요', i)

call_10_times(print_hello)

def call_10_times(func):
  for i in range(10):
    func(i)

def print_hello(number):
  print('안녕하세요', number)

call_10_times(lambda number: print('안녕하세요', number))

import random

num = input("게임수: ")

for i in range(0,int(num)):
  lotto = random.sample(range(1, 46), 6)
  lotto.sort()
  print(lotto)

def 짝수만(number):
  return number % 2 == 0

a = list(range(100))
b = filter(짝수만, a)
print(list(b))

a = list(range(100))
b = filter(lambda number: number % 2 == 0, a)
print(list(b))

짝수만 = lambda number: number % 2 == 0
a = list(range(100))
b = filter(짝수만, a)
print(list(b))

def 제곱(number):
  return number * number

a = list(range(100))
print(list(map(제곱, a)))

a = list(range(100))
print(list(map(lambda number: number * number, a)))

print([i * i for i in a])

# 짝수 재곱 둘다 적용가능
print([i * i for i in a if i % 2 == 0])

# 메모리 용량 절약시 map filter가... 더 좋음
# lambda함수 사용시 한줄 코드 작성 가능