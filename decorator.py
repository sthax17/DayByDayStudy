# -*- coding: utf-8 -*-
"""decorator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iQ3AhM8NJXmfoBWA78lkcuu-7W3iSaX1
"""

def decorator(func):
    def decorated():
        print('함수 시작!')
        func()
        print('함수 끝!')
    return decorated


@decorator
def hello_world():
    print('Hello World!')

hello_world()



"""혼파공 파이썬"""

def 데코레이터(함수):
  print('미리 어떤 처리를 진행합니다')
  return 함수

@데코레이터
def 테스트():
  print('안녕하세요')

테스트()

def 외부데코레이터(number):
  def 데코레이터(함수):
    print('미리 어떤 처리를 진행합니다', number)
    return 함수
  return 데코레이터
  
@외부데코레이터(number=100)
def 테스트():
  print('안녕하세요')

테스트()

def test(function):
  def wrapper():
    print('인사가 시작되었습니다.')
    function()
    print('인사가 종료되었습니다')
  return wrapper

@test
def hello():
  print('hello')

hello()

from functools import wraps

def test(function):
  @wraps(function) 
def wrapper(*arg, **kwargs): 
  print('인사가 시작되었습니다.')
  function(*arg, **kwargs)
  print('인사가 종료되었습니다')
  return wrapper

def trace(func):
  def wrapper(a, b):
    r = func(a, b)
    print('{0}(a={1}, b={2}) -> {3}'. format(func.__name__, a, b, r))
    return r
  return wrapper

@trace
def add(a, b):
  return a + b

print(add(10, 20))

# 모듈 가져오기
import math

# 클래스 선언
class Circle:
    def __init__(self,radius):
        if radius <= 0:
            raise TypeError("양수를 넣어주세요")
        self.__radius = radius
    def get_circumference(self):
        return 2 * math.pi * self.__radius
    def get_area(self):
        return math.pi*(self.__radius**2)
    @property
    def radius(self):
        return self.__radius
    @radius.setter
    def radius(self,value):
        if value<=0 :
            raise TypeError("길이가 양의 숫자여야 한다.")
        self.__radius = value        

circle = CirAcle(10)
print("원의 둘레 :",circle.get_circumference())
print("원의 넓이 :",circle.get_area())

print("원래 반지름 :",circle.radius)
circle.radius = 15  # 데코 이전처럼 사용시 오류발생, 연산자사용
print("변경된 반지름 :",circle.radius)

# 데코레이터 이전 접근 및 수정
# print(circle.get_radius())
# circle.set_radius(15)

